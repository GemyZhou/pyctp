#summary pyctp 配置指南
#labels pyctp,Configuration

= 简介 =

pyctp将配置分为服务器连接配置和策略配置两个文件，同时用指定的state.ini文件来保存执行状态；


= 服务器连接配置 =

默认文件名为base.ini, 但可在执行函数中指定名称，如demo_base.ini；

== 文件格式 ==

=== 基础配置块 ===
  
  默认块名为Base, 用于设定行情连接和交易连接名，其中行情连接可设定多个；

  键值为
  {{{  
   users:设定行情连接
   trades:设定交易链接
  }}}

=== 行情配置块 ===
  逐一配置基础配置块中指定的行情连接；

  键值包括
  {{{
  port: 端口
  broker_id: 服务提供商ID
  investor_id: 行情用户ID，行情不需设定用户名,通常用*取代
  passwd: 行情用户口令，不需要，可用*取代
  }}}

  * 目前investor_id和passwd都以明文保存在配置文件中，不够安全；须至少以简单可逆方式处理下，避免被托管服务器提供商轻易获取；*
  
=== 交易配置块 ===
  键值同交易配置块，但是必须设定investor_id和passwd, 才能够链接到相应的交易服务器或模拟服务器；


= 策略配置 =
目前分别简单实现了行情记录和交易策略设定；

== 行情记录配置 ==
仅提供了非常简陋的实现，须直接在 *Trace_Instruments_Raw* 节下指定要记录的合约；

=== Trace_Instruments_Raw配置 ===
其下键值为各合约种类，可任意添加键值，并将具体合约设定为相应值；

=== TODO: ===
合理的行情记录方式是挨个枚举各交易所的现有合约，然后记录之；这里的矛盾是合约查询属于交易链接的功能；

或者也可以根据各类合约的命名规则和当前日期，计算应当出现的合约；

因为目前我自己只操作IF，没这方面的需求，所以也不打算在这上面化更多时间；

== 交易策略配置 ==



= 状态文件 =
  用于临时保存开仓状态，记录了开仓手数、止损函数、初始止损、跟踪止损等必要信息，以备系统崩溃并重新启动后能继续跟进；

  具体细节可参见config文件中的相应函数；

= 实盘执行 =
  为保证鲁棒性和连续性，建议实盘时，同时开启行情记录Agent和交易Agent两路程序。这样，交易Agent崩溃后，能从行情记录Agent的历史行情中取回相应数据，并据此持续运作；